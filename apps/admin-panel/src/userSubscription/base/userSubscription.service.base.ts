/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserSubscription as PrismaUserSubscription,
  Subscription as PrismaSubscription,
  User as PrismaUser,
} from "@prisma/client";

export class UserSubscriptionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserSubscriptionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userSubscription.count(args);
  }

  async userSubscriptions<T extends Prisma.UserSubscriptionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserSubscriptionFindManyArgs>
  ): Promise<PrismaUserSubscription[]> {
    return this.prisma.userSubscription.findMany<Prisma.UserSubscriptionFindManyArgs>(
      args
    );
  }
  async userSubscription<T extends Prisma.UserSubscriptionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserSubscriptionFindUniqueArgs>
  ): Promise<PrismaUserSubscription | null> {
    return this.prisma.userSubscription.findUnique(args);
  }
  async createUserSubscription<T extends Prisma.UserSubscriptionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserSubscriptionCreateArgs>
  ): Promise<PrismaUserSubscription> {
    return this.prisma.userSubscription.create<T>(args);
  }
  async updateUserSubscription<T extends Prisma.UserSubscriptionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserSubscriptionUpdateArgs>
  ): Promise<PrismaUserSubscription> {
    return this.prisma.userSubscription.update<T>(args);
  }
  async deleteUserSubscription<T extends Prisma.UserSubscriptionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserSubscriptionDeleteArgs>
  ): Promise<PrismaUserSubscription> {
    return this.prisma.userSubscription.delete(args);
  }

  async getSubscription(parentId: string): Promise<PrismaSubscription | null> {
    return this.prisma.userSubscription
      .findUnique({
        where: { id: parentId },
      })
      .subscription();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.userSubscription
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
