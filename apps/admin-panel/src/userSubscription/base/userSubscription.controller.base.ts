/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserSubscriptionService } from "../userSubscription.service";
import { UserSubscriptionCreateInput } from "./UserSubscriptionCreateInput";
import { UserSubscription } from "./UserSubscription";
import { UserSubscriptionFindManyArgs } from "./UserSubscriptionFindManyArgs";
import { UserSubscriptionWhereUniqueInput } from "./UserSubscriptionWhereUniqueInput";
import { UserSubscriptionUpdateInput } from "./UserSubscriptionUpdateInput";

export class UserSubscriptionControllerBase {
  constructor(protected readonly service: UserSubscriptionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserSubscription })
  async createUserSubscription(
    @common.Body() data: UserSubscriptionCreateInput
  ): Promise<UserSubscription> {
    return await this.service.createUserSubscription({
      data: {
        ...data,

        subscription: {
          connect: data.subscription,
        },

        user: {
          connect: data.user,
        },
      },
      select: {
        appointmentsLeft: true,
        createdAt: true,
        endDate: true,
        id: true,
        startDate: true,

        subscription: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserSubscription] })
  @ApiNestedQuery(UserSubscriptionFindManyArgs)
  async userSubscriptions(
    @common.Req() request: Request
  ): Promise<UserSubscription[]> {
    const args = plainToClass(UserSubscriptionFindManyArgs, request.query);
    return this.service.userSubscriptions({
      ...args,
      select: {
        appointmentsLeft: true,
        createdAt: true,
        endDate: true,
        id: true,
        startDate: true,

        subscription: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserSubscription })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userSubscription(
    @common.Param() params: UserSubscriptionWhereUniqueInput
  ): Promise<UserSubscription | null> {
    const result = await this.service.userSubscription({
      where: params,
      select: {
        appointmentsLeft: true,
        createdAt: true,
        endDate: true,
        id: true,
        startDate: true,

        subscription: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserSubscription })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserSubscription(
    @common.Param() params: UserSubscriptionWhereUniqueInput,
    @common.Body() data: UserSubscriptionUpdateInput
  ): Promise<UserSubscription | null> {
    try {
      return await this.service.updateUserSubscription({
        where: params,
        data: {
          ...data,

          subscription: {
            connect: data.subscription,
          },

          user: {
            connect: data.user,
          },
        },
        select: {
          appointmentsLeft: true,
          createdAt: true,
          endDate: true,
          id: true,
          startDate: true,

          subscription: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserSubscription })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserSubscription(
    @common.Param() params: UserSubscriptionWhereUniqueInput
  ): Promise<UserSubscription | null> {
    try {
      return await this.service.deleteUserSubscription({
        where: params,
        select: {
          appointmentsLeft: true,
          createdAt: true,
          endDate: true,
          id: true,
          startDate: true,

          subscription: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
